generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  restaurant
  driver
  admin
}

enum OrderStatus {
  pending
  preparing
  on_the_way
  delivered
  cancelled
  declined
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  email     String   @unique
  password  String
  phone     String
  role      Role     @default(customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  restaurants   Restaurant[]
  driver        Driver?
  Order         Order[]

  @@index([role, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String // hashed token
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Restaurant {
  id          String  @id @default(uuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  name        String
  address     String
  description String?
  isActive    Boolean @default(true)
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menuItems MenuItem[]
  Order     Order[]

  @@index([name])
  @@index([userId])
  @@index([createdAt(sort: Desc), isActive(sort: Desc)])
}

model Driver {
  id      String @id @default(uuid())
  license String @unique
  vehicle String
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Delivery  Delivery[]

  @@index([userId])
  @@index([createdAt(sort: Desc)])
}

model MenuItem {
  id           String     @id @default(uuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  name         String
  description  String?
  price        Float
  image        String?
  isAvailable  Boolean?   @default(true)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItems OrderItem[]

  @@index([restaurantId])
  @@index([name])
  @@index([isAvailable(sort: Desc), createdAt(sort: Desc)])
}

model Order {
  id                    String      @id @default(uuid())
  status                OrderStatus @default(pending)
  statusUpdatedAt       DateTime?   @default(now())
  totalPrice            Decimal
  estimatedDeliveryTime DateTime?
  deliveryAddress       String?
  contactPhone          String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  restaurantId          String
  restaurant            Restaurant  @relation(fields: [restaurantId], references: [id])
  OrderItems            OrderItem[]
  Delivery              Delivery?

  @@index([status, createdAt(sort: Desc)])
  @@index([createdAt])
  @@index([userId])
  @@index([restaurantId])
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
}

model Delivery {
  id          String    @id @default(uuid())
  assignedAt  DateTime  @default(now())
  pickedUpAt  DateTime?
  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])

  @@index([driverId])
  @@index([orderId])
  @@index([createdAt])
}
